# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"
tasks:
  setup:
    desc: Bootstraps Flux into a Kubernetes cluster
    summary: |
      Args:
        cluster: Cluster to run command against (required)
    prompt: Bootstrap Flux into the '{{.cluster}}' cluster ... continue?
    cmds:
      # Install network
      - kubectl --context {{.cluster}} --kubeconfig {{.KUBECONFIG_FILE}} create namespace network
      - kubectl --context {{.cluster}} --kubeconfig {{.KUBECONFIG_FILE}} label namespace network pod-security.kubernetes.io/enforce=privileged
      - kubectl --context {{.cluster}} --kubeconfig {{.KUBECONFIG_FILE}} label namespace network pod-security.kubernetes.io/enforce-version=latest
      - if ! helm repo list | grep -q "cilium"; then helm repo add cilium https://helm.cilium.io/; fihelm repo add cilium https://helm.cilium.io/; fi
      - helm install cilium cilium/cilium --version 1.17.3 --namespace network --set ipam.mode=kubernetes --set kubeProxyReplacement=true --set securityContext.capabilities.ciliumAgent="{CHOWN,KILL,NET_ADMIN,NET_RAW,IPC_LOCK,SYS_ADMIN,SYS_RESOURCE,DAC_OVERRIDE,FOWNER,SETGID,SETUID}" --set securityContext.capabilities.cleanCiliumState="{NET_ADMIN,SYS_ADMIN,SYS_RESOURCE}" --set cgroup.autoMount.enabled=false --set cgroup.hostRoot=/sys/fs/cgroup --set k8sServiceHost=localhost --set k8sServicePort=7445 --wait
      # Install Flux
      - kubectl --context {{.cluster}} apply --kubeconfig {{.KUBECONFIG_FILE}} --server-side --kustomize {{.KUBERNETES_DIR}}/bootstrap/flux
      - cat {{.AGE_FILE}} | kubectl -n flux-system create --kubeconfig {{.KUBECONFIG_FILE}} secret generic sops-age --from-file=age.agekey=/dev/stdin
      - sops --decrypt {{.KUBERNETES_DIR}}/flux/vars/cluster-secrets.sops.yaml | kubectl apply --kubeconfig {{.KUBECONFIG_FILE}} --server-side --filename -
      - kubectl --context {{.cluster}} apply --kubeconfig {{.KUBECONFIG_FILE}} --server-side --filename {{.KUBERNETES_DIR}}/flux/vars/cluster-settings.yaml
      - kubectl --context {{.cluster}} apply --kubeconfig {{.KUBECONFIG_FILE}} --server-side --kustomize {{.KUBERNETES_DIR}}/flux/config
      - task: github-deploy-key
    requires:
      vars: ["cluster"]
    preconditions:
      - msg: Missing kubeconfig
        sh: test -f {{.KUBECONFIG_FILE}}
      - msg: Missing Sops Age key file
        sh: test -f {{.AGE_FILE}}
  github-deploy-key:
    cmds:
      - kubectl --context {{.cluster}} create namespace flux-system --dry-run=client -o yaml | kubectl --context {{.cluster}} apply --filename -
      - sops --decrypt {{.KUBERNETES_DIR}}/bootstrap/flux/github-deploy-key.sops.yaml | kubectl apply --context {{.cluster}} --server-side --filename -
    requires:
      vars: ["cluster"]
    preconditions:
      - msg: Missing kubeconfig
        sh: test -f {{.KUBECONFIG_FILE}}
      - msg: Missing Sops Age key file
        sh: test -f {{.AGE_FILE}}
      - msg: Missing Github deploy key file
        sh: test -f {{.KUBERNETES_DIR}}/bootstrap/flux/github-deploy-key.sops.yaml
  reconcile-apps:
    desc: Force update Flux to pull in changes from your Git repository
    cmd: flux --context {{.cluster}} reconcile --namespace flux-system kustomization cluster-apps --with-source
    requires:
      vars: ["cluster"]
    preconditions:
      - msg: Missing kubeconfig
        sh: test -f {{.KUBECONFIG_FILE}}
  create-new-app:
    desc: Copy template to Flux directory to set up new app 
    cmds:
      - cp -r .taskfiles/templates/app apps/{{.namespace}}/{{.app}}
      - find apps/{{.namespace}}/{{.app}} -type f -exec sed -i 's/<APP_NAME>/{{.app}}/g' {} +
      - find apps/{{.namespace}}/{{.app}} -type f -exec sed -i 's/<NS_NAME>/{{.namespace}}/g' {} +
    requires:
      vars: ["app", "namespace"]
